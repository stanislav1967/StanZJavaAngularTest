{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CourseService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/courses';\n    this.coursesSubject = new BehaviorSubject([]);\n    this.courses$ = this.coursesSubject.asObservable();\n  }\n  // Get all courses\n  getCourses() {\n    return this.http.get(this.apiUrl).pipe(tap(courses => this.coursesSubject.next(courses)), catchError(this.handleError));\n  }\n  // Get active courses\n  getActiveCourses() {\n    return this.http.get(`${this.apiUrl}/active`).pipe(catchError(this.handleError));\n  }\n  // Get course by ID\n  getCourse(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  // Create new course\n  createCourse(course) {\n    return this.http.post(this.apiUrl, course).pipe(tap(newCourse => {\n      const currentCourses = this.coursesSubject.value;\n      this.coursesSubject.next([...currentCourses, newCourse]);\n    }), catchError(this.handleError));\n  }\n  // Update course\n  updateCourse(id, course) {\n    return this.http.put(`${this.apiUrl}/${id}`, course).pipe(tap(updatedCourse => {\n      const currentCourses = this.coursesSubject.value;\n      const index = currentCourses.findIndex(c => c.id === id);\n      if (index !== -1) {\n        currentCourses[index] = updatedCourse;\n        this.coursesSubject.next([...currentCourses]);\n      }\n    }), catchError(this.handleError));\n  }\n  // Delete course\n  deleteCourse(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => {\n      const currentCourses = this.coursesSubject.value;\n      const filteredCourses = currentCourses.filter(c => c.id !== id);\n      this.coursesSubject.next(filteredCourses);\n    }), catchError(this.handleError));\n  }\n  // Search courses\n  searchCourses(query) {\n    const url = query ? `${this.apiUrl}/search?q=${encodeURIComponent(query)}` : this.apiUrl;\n    return this.http.get(url).pipe(tap(courses => this.coursesSubject.next(courses)), catchError(this.handleError));\n  }\n  // Enroll students in course\n  enrollStudentsInCourse(courseId, studentIds) {\n    return this.http.post(`${this.apiUrl}/${courseId}/students`, studentIds).pipe(catchError(this.handleError));\n  }\n  // Refresh courses list\n  refreshCourses() {\n    this.getCourses().subscribe();\n  }\n  // Error handling\n  handleError(error) {\n    console.error('An error occurred:', error);\n    throw error;\n  }\n  static {\n    this.ɵfac = function CourseService_Factory(t) {\n      return new (t || CourseService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CourseService,\n      factory: CourseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","catchError","CourseService","constructor","http","apiUrl","coursesSubject","courses$","asObservable","getCourses","get","pipe","courses","next","handleError","getActiveCourses","getCourse","id","createCourse","course","post","newCourse","currentCourses","value","updateCourse","put","updatedCourse","index","findIndex","c","deleteCourse","delete","filteredCourses","filter","searchCourses","query","url","encodeURIComponent","enrollStudentsInCourse","courseId","studentIds","refreshCourses","subscribe","error","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\local_work\\JavaAngularTest\\frontend\\src\\app\\services\\course.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap, catchError } from 'rxjs/operators';\r\nimport { Course, CourseFormData } from '../models/course.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CourseService {\r\n  private apiUrl = 'http://localhost:8080/api/courses';\r\n  private coursesSubject = new BehaviorSubject<Course[]>([]);\r\n  public courses$ = this.coursesSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Get all courses\r\n  getCourses(): Observable<Course[]> {\r\n    return this.http.get<Course[]>(this.apiUrl).pipe(\r\n      tap(courses => this.coursesSubject.next(courses)),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Get active courses\r\n  getActiveCourses(): Observable<Course[]> {\r\n    return this.http.get<Course[]>(`${this.apiUrl}/active`).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Get course by ID\r\n  getCourse(id: number): Observable<Course> {\r\n    return this.http.get<Course>(`${this.apiUrl}/${id}`).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Create new course\r\n  createCourse(course: CourseFormData): Observable<Course> {\r\n    return this.http.post<Course>(this.apiUrl, course).pipe(\r\n      tap(newCourse => {\r\n        const currentCourses = this.coursesSubject.value;\r\n        this.coursesSubject.next([...currentCourses, newCourse]);\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Update course\r\n  updateCourse(id: number, course: CourseFormData): Observable<Course> {\r\n    return this.http.put<Course>(`${this.apiUrl}/${id}`, course).pipe(\r\n      tap(updatedCourse => {\r\n        const currentCourses = this.coursesSubject.value;\r\n        const index = currentCourses.findIndex(c => c.id === id);\r\n        if (index !== -1) {\r\n          currentCourses[index] = updatedCourse;\r\n          this.coursesSubject.next([...currentCourses]);\r\n        }\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Delete course\r\n  deleteCourse(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`).pipe(\r\n      tap(() => {\r\n        const currentCourses = this.coursesSubject.value;\r\n        const filteredCourses = currentCourses.filter(c => c.id !== id);\r\n        this.coursesSubject.next(filteredCourses);\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Search courses\r\n  searchCourses(query: string): Observable<Course[]> {\r\n    const url = query ? `${this.apiUrl}/search?q=${encodeURIComponent(query)}` : this.apiUrl;\r\n    return this.http.get<Course[]>(url).pipe(\r\n      tap(courses => this.coursesSubject.next(courses)),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Enroll students in course\r\n  enrollStudentsInCourse(courseId: number, studentIds: number[]): Observable<void> {\r\n    return this.http.post<void>(`${this.apiUrl}/${courseId}/students`, studentIds).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Refresh courses list\r\n  refreshCourses(): void {\r\n    this.getCourses().subscribe();\r\n  }\r\n\r\n  // Error handling\r\n  private handleError(error: any): Observable<never> {\r\n    console.error('An error occurred:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAMhD,OAAM,MAAOC,aAAa;EAKxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,MAAM,GAAG,mCAAmC;IAC5C,KAAAC,cAAc,GAAG,IAAIP,eAAe,CAAW,EAAE,CAAC;IACnD,KAAAQ,QAAQ,GAAG,IAAI,CAACD,cAAc,CAACE,YAAY,EAAE;EAEb;EAEvC;EACAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAW,IAAI,CAACL,MAAM,CAAC,CAACM,IAAI,CAC9CX,GAAG,CAACY,OAAO,IAAI,IAAI,CAACN,cAAc,CAACO,IAAI,CAACD,OAAO,CAAC,CAAC,EACjDX,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACH;EAEA;EACAC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACX,IAAI,CAACM,GAAG,CAAW,GAAG,IAAI,CAACL,MAAM,SAAS,CAAC,CAACM,IAAI,CAC1DV,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACH;EAEA;EACAE,SAASA,CAACC,EAAU;IAClB,OAAO,IAAI,CAACb,IAAI,CAACM,GAAG,CAAS,GAAG,IAAI,CAACL,MAAM,IAAIY,EAAE,EAAE,CAAC,CAACN,IAAI,CACvDV,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACH;EAEA;EACAI,YAAYA,CAACC,MAAsB;IACjC,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAS,IAAI,CAACf,MAAM,EAAEc,MAAM,CAAC,CAACR,IAAI,CACrDX,GAAG,CAACqB,SAAS,IAAG;MACd,MAAMC,cAAc,GAAG,IAAI,CAAChB,cAAc,CAACiB,KAAK;MAChD,IAAI,CAACjB,cAAc,CAACO,IAAI,CAAC,CAAC,GAAGS,cAAc,EAAED,SAAS,CAAC,CAAC;IAC1D,CAAC,CAAC,EACFpB,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACH;EAEA;EACAU,YAAYA,CAACP,EAAU,EAAEE,MAAsB;IAC7C,OAAO,IAAI,CAACf,IAAI,CAACqB,GAAG,CAAS,GAAG,IAAI,CAACpB,MAAM,IAAIY,EAAE,EAAE,EAAEE,MAAM,CAAC,CAACR,IAAI,CAC/DX,GAAG,CAAC0B,aAAa,IAAG;MAClB,MAAMJ,cAAc,GAAG,IAAI,CAAChB,cAAc,CAACiB,KAAK;MAChD,MAAMI,KAAK,GAAGL,cAAc,CAACM,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKA,EAAE,CAAC;MACxD,IAAIU,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBL,cAAc,CAACK,KAAK,CAAC,GAAGD,aAAa;QACrC,IAAI,CAACpB,cAAc,CAACO,IAAI,CAAC,CAAC,GAAGS,cAAc,CAAC,CAAC;;IAEjD,CAAC,CAAC,EACFrB,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACH;EAEA;EACAgB,YAAYA,CAACb,EAAU;IACrB,OAAO,IAAI,CAACb,IAAI,CAAC2B,MAAM,CAAO,GAAG,IAAI,CAAC1B,MAAM,IAAIY,EAAE,EAAE,CAAC,CAACN,IAAI,CACxDX,GAAG,CAAC,MAAK;MACP,MAAMsB,cAAc,GAAG,IAAI,CAAChB,cAAc,CAACiB,KAAK;MAChD,MAAMS,eAAe,GAAGV,cAAc,CAACW,MAAM,CAACJ,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKA,EAAE,CAAC;MAC/D,IAAI,CAACX,cAAc,CAACO,IAAI,CAACmB,eAAe,CAAC;IAC3C,CAAC,CAAC,EACF/B,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACH;EAEA;EACAoB,aAAaA,CAACC,KAAa;IACzB,MAAMC,GAAG,GAAGD,KAAK,GAAG,GAAG,IAAI,CAAC9B,MAAM,aAAagC,kBAAkB,CAACF,KAAK,CAAC,EAAE,GAAG,IAAI,CAAC9B,MAAM;IACxF,OAAO,IAAI,CAACD,IAAI,CAACM,GAAG,CAAW0B,GAAG,CAAC,CAACzB,IAAI,CACtCX,GAAG,CAACY,OAAO,IAAI,IAAI,CAACN,cAAc,CAACO,IAAI,CAACD,OAAO,CAAC,CAAC,EACjDX,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACH;EAEA;EACAwB,sBAAsBA,CAACC,QAAgB,EAAEC,UAAoB;IAC3D,OAAO,IAAI,CAACpC,IAAI,CAACgB,IAAI,CAAO,GAAG,IAAI,CAACf,MAAM,IAAIkC,QAAQ,WAAW,EAAEC,UAAU,CAAC,CAAC7B,IAAI,CACjFV,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAC7B;EACH;EAEA;EACA2B,cAAcA,CAAA;IACZ,IAAI,CAAChC,UAAU,EAAE,CAACiC,SAAS,EAAE;EAC/B;EAEA;EACQ5B,WAAWA,CAAC6B,KAAU;IAC5BC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACb;;;uBA5FWzC,aAAa,EAAA2C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAb9C,aAAa;MAAA+C,OAAA,EAAb/C,aAAa,CAAAgD,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}