{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EnrollmentResponse {\n  constructor(id, studentId, courseId, enrolledAt, studentName, courseName) {\n    this.id = id;\n    this.studentId = studentId;\n    this.courseId = courseId;\n    this.enrolledAt = enrolledAt;\n    this.studentName = studentName;\n    this.courseName = courseName;\n  }\n}\nexport class EnrollmentService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/enrollments`;\n  }\n  enrollStudentInCourse(enrollment) {\n    // Use the existing student enrollment endpoint\n    return this.http.post(`${environment.apiUrl}/api/students/${enrollment.studentId}/courses`, [enrollment.courseId]).pipe(map(() => new EnrollmentResponse(null, enrollment.studentId, enrollment.courseId, new Date().toISOString(), '',\n    // Will be populated by the component\n    '' // Will be populated by the component\n    )));\n  }\n  unenrollStudentFromCourse(studentId, courseId) {\n    // Use the existing student update endpoint to remove the course\n    return this.http.get(`${environment.apiUrl}/api/students/${studentId}`).pipe(map(student => {\n      const updatedCourseIds = student.courseIds?.filter(id => id !== courseId) || [];\n      return this.http.put(`${environment.apiUrl}/api/students/${studentId}`, {\n        ...student,\n        courseIds: updatedCourseIds\n      });\n    }), switchMap(updateRequest => updateRequest));\n  }\n  getStudentEnrollments(studentId) {\n    return this.http.get(`${this.apiUrl}/student/${studentId}`);\n  }\n  getCourseEnrollments(courseId) {\n    return this.http.get(`${this.apiUrl}/course/${courseId}`);\n  }\n  getAllEnrollments() {\n    return this.http.get(this.apiUrl);\n  }\n  static {\n    this.ɵfac = function EnrollmentService_Factory(t) {\n      return new (t || EnrollmentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EnrollmentService,\n      factory: EnrollmentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","environment","EnrollmentResponse","constructor","id","studentId","courseId","enrolledAt","studentName","courseName","EnrollmentService","http","apiUrl","enrollStudentInCourse","enrollment","post","pipe","Date","toISOString","unenrollStudentFromCourse","get","student","updatedCourseIds","courseIds","filter","put","switchMap","updateRequest","getStudentEnrollments","getCourseEnrollments","getAllEnrollments","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\avrah\\OneDrive\\Work\\JavaAngularTest\\frontend\\src\\app\\services\\enrollment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface EnrollmentRequest {\r\n  studentId: number;\r\n  courseId: number;\r\n}\r\n\r\nexport class EnrollmentResponse {\r\n  constructor(\r\n    public id: number | null,\r\n    public studentId: number,\r\n    public courseId: number,\r\n    public enrolledAt: string,\r\n    public studentName: string,\r\n    public courseName: string\r\n  ) {}\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EnrollmentService {\r\n  private apiUrl = `${environment.apiUrl}/enrollments`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  enrollStudentInCourse(enrollment: EnrollmentRequest): Observable<EnrollmentResponse> {\r\n    // Use the existing student enrollment endpoint\r\n    return this.http.post<void>(`${environment.apiUrl}/api/students/${enrollment.studentId}/courses`, [enrollment.courseId])\r\n      .pipe(\r\n        map(() => new EnrollmentResponse(\r\n          null,\r\n          enrollment.studentId,\r\n          enrollment.courseId,\r\n          new Date().toISOString(),\r\n          '', // Will be populated by the component\r\n          ''  // Will be populated by the component\r\n        ))\r\n      );\r\n  }\r\n\r\n  unenrollStudentFromCourse(studentId: number, courseId: number): Observable<void> {\r\n    // Use the existing student update endpoint to remove the course\r\n    return this.http.get<any>(`${environment.apiUrl}/api/students/${studentId}`)\r\n      .pipe(\r\n        map(student => {\r\n          const updatedCourseIds = student.courseIds?.filter((id: number) => id !== courseId) || [];\r\n          return this.http.put<void>(`${environment.apiUrl}/api/students/${studentId}`, {\r\n            ...student,\r\n            courseIds: updatedCourseIds\r\n          });\r\n        }),\r\n        switchMap(updateRequest => updateRequest)\r\n      );\r\n  }\r\n\r\n  getStudentEnrollments(studentId: number): Observable<EnrollmentResponse[]> {\r\n    return this.http.get<EnrollmentResponse[]>(`${this.apiUrl}/student/${studentId}`);\r\n  }\r\n\r\n  getCourseEnrollments(courseId: number): Observable<EnrollmentResponse[]> {\r\n    return this.http.get<EnrollmentResponse[]>(`${this.apiUrl}/course/${courseId}`);\r\n  }\r\n\r\n  getAllEnrollments(): Observable<EnrollmentResponse[]> {\r\n    return this.http.get<EnrollmentResponse[]>(this.apiUrl);\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,gCAAgC;;;AAO5D,OAAM,MAAOC,kBAAkB;EAC7BC,YACSC,EAAiB,EACjBC,SAAiB,EACjBC,QAAgB,EAChBC,UAAkB,EAClBC,WAAmB,EACnBC,UAAkB;IALlB,KAAAL,EAAE,GAAFA,EAAE;IACF,KAAAC,SAAS,GAATA,SAAS;IACT,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,UAAU,GAAVA,UAAU;EAChB;;AAML,OAAM,MAAOC,iBAAiB;EAG5BP,YAAoBQ,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGX,WAAW,CAACW,MAAM,cAAc;EAEb;EAEvCC,qBAAqBA,CAACC,UAA6B;IACjD;IACA,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAO,GAAGd,WAAW,CAACW,MAAM,iBAAiBE,UAAU,CAACT,SAAS,UAAU,EAAE,CAACS,UAAU,CAACR,QAAQ,CAAC,CAAC,CACrHU,IAAI,CACHhB,GAAG,CAAC,MAAM,IAAIE,kBAAkB,CAC9B,IAAI,EACJY,UAAU,CAACT,SAAS,EACpBS,UAAU,CAACR,QAAQ,EACnB,IAAIW,IAAI,EAAE,CAACC,WAAW,EAAE,EACxB,EAAE;IAAE;IACJ,EAAE,CAAE;KACL,CAAC,CACH;EACL;EAEAC,yBAAyBA,CAACd,SAAiB,EAAEC,QAAgB;IAC3D;IACA,OAAO,IAAI,CAACK,IAAI,CAACS,GAAG,CAAM,GAAGnB,WAAW,CAACW,MAAM,iBAAiBP,SAAS,EAAE,CAAC,CACzEW,IAAI,CACHhB,GAAG,CAACqB,OAAO,IAAG;MACZ,MAAMC,gBAAgB,GAAGD,OAAO,CAACE,SAAS,EAAEC,MAAM,CAAEpB,EAAU,IAAKA,EAAE,KAAKE,QAAQ,CAAC,IAAI,EAAE;MACzF,OAAO,IAAI,CAACK,IAAI,CAACc,GAAG,CAAO,GAAGxB,WAAW,CAACW,MAAM,iBAAiBP,SAAS,EAAE,EAAE;QAC5E,GAAGgB,OAAO;QACVE,SAAS,EAAED;OACZ,CAAC;IACJ,CAAC,CAAC,EACFI,SAAS,CAACC,aAAa,IAAIA,aAAa,CAAC,CAC1C;EACL;EAEAC,qBAAqBA,CAACvB,SAAiB;IACrC,OAAO,IAAI,CAACM,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,MAAM,YAAYP,SAAS,EAAE,CAAC;EACnF;EAEAwB,oBAAoBA,CAACvB,QAAgB;IACnC,OAAO,IAAI,CAACK,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,MAAM,WAAWN,QAAQ,EAAE,CAAC;EACjF;EAEAwB,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACnB,IAAI,CAACS,GAAG,CAAuB,IAAI,CAACR,MAAM,CAAC;EACzD;;;uBA7CWF,iBAAiB,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAjBxB,iBAAiB;MAAAyB,OAAA,EAAjBzB,iBAAiB,CAAA0B,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}