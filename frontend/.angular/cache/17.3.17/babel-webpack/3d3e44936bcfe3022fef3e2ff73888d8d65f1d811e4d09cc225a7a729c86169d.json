{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class VersionService {\n  constructor(http) {\n    this.http = http;\n    this.backendVersion = '1.0.0'; // Fallback version\n    this.backendBuildDate = new Date().toLocaleDateString(); // Fallback date\n    this.backendVersionInfo = null;\n    this.loadBackendVersion();\n  }\n  getAppVersion() {\n    return '1.0.0';\n  }\n  getBackendVersion() {\n    return this.backendVersion;\n  }\n  getBackendBuildDate() {\n    return this.backendBuildDate;\n  }\n  getBackendVersionInfo() {\n    return this.backendVersionInfo;\n  }\n  getFullVersionInfo() {\n    return {\n      frontend: this.getAppVersion(),\n      backend: this.getBackendVersion(),\n      buildDate: this.getBackendBuildDate()\n    };\n  }\n  loadBackendVersion() {\n    this.http.get('http://localhost:8080/api/version').pipe(catchError(error => {\n      console.warn('Could not fetch backend version:', error);\n      return of(null);\n    })).subscribe(versionInfo => {\n      if (versionInfo) {\n        this.backendVersion = versionInfo.version;\n        this.backendBuildDate = versionInfo.buildDate;\n        this.backendVersionInfo = versionInfo;\n      }\n    });\n  }\n  // Method to manually refresh backend version\n  refreshBackendVersion() {\n    return this.http.get('http://localhost:8080/api/version').pipe(catchError(error => {\n      console.warn('Could not fetch backend version:', error);\n      return of(null);\n    }));\n  }\n  static {\n    this.ɵfac = function VersionService_Factory(t) {\n      return new (t || VersionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: VersionService,\n      factory: VersionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","catchError","VersionService","constructor","http","backendVersion","backendBuildDate","Date","toLocaleDateString","backendVersionInfo","loadBackendVersion","getAppVersion","getBackendVersion","getBackendBuildDate","getBackendVersionInfo","getFullVersionInfo","frontend","backend","buildDate","get","pipe","error","console","warn","subscribe","versionInfo","version","refreshBackendVersion","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\local_work\\JavaAngularTest\\frontend\\src\\app\\services\\version.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nexport interface BackendVersionInfo {\r\n  version: string;\r\n  buildDate: string;\r\n  javaVersion: string;\r\n  springBootVersion: string;\r\n  timestamp: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VersionService {\r\n  \r\n  private backendVersion: string = '1.0.0'; // Fallback version\r\n  private backendBuildDate: string = new Date().toLocaleDateString(); // Fallback date\r\n  private backendVersionInfo: BackendVersionInfo | null = null;\r\n  \r\n  constructor(private http: HttpClient) {\r\n    this.loadBackendVersion();\r\n  }\r\n  \r\n  getAppVersion(): string {\r\n    return '1.0.0';\r\n  }\r\n  \r\n  getBackendVersion(): string {\r\n    return this.backendVersion;\r\n  }\r\n  \r\n  getBackendBuildDate(): string {\r\n    return this.backendBuildDate;\r\n  }\r\n  \r\n  getBackendVersionInfo(): BackendVersionInfo | null {\r\n    return this.backendVersionInfo;\r\n  }\r\n  \r\n  getFullVersionInfo(): { frontend: string; backend: string; buildDate: string } {\r\n    return {\r\n      frontend: this.getAppVersion(),\r\n      backend: this.getBackendVersion(),\r\n      buildDate: this.getBackendBuildDate()\r\n    };\r\n  }\r\n  \r\n  private loadBackendVersion(): void {\r\n    this.http.get<BackendVersionInfo>('http://localhost:8080/api/version')\r\n      .pipe(\r\n        catchError(error => {\r\n          console.warn('Could not fetch backend version:', error);\r\n          return of(null);\r\n        })\r\n      )\r\n      .subscribe(versionInfo => {\r\n        if (versionInfo) {\r\n          this.backendVersion = versionInfo.version;\r\n          this.backendBuildDate = versionInfo.buildDate;\r\n          this.backendVersionInfo = versionInfo;\r\n        }\r\n      });\r\n  }\r\n  \r\n  // Method to manually refresh backend version\r\n  refreshBackendVersion(): Observable<BackendVersionInfo | null> {\r\n    return this.http.get<BackendVersionInfo>('http://localhost:8080/api/version')\r\n      .pipe(\r\n        catchError(error => {\r\n          console.warn('Could not fetch backend version:', error);\r\n          return of(null);\r\n        })\r\n      );\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAa,gBAAgB;;;AAahD,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,cAAc,GAAW,OAAO,CAAC,CAAC;IAClC,KAAAC,gBAAgB,GAAW,IAAIC,IAAI,EAAE,CAACC,kBAAkB,EAAE,CAAC,CAAC;IAC5D,KAAAC,kBAAkB,GAA8B,IAAI;IAG1D,IAAI,CAACC,kBAAkB,EAAE;EAC3B;EAEAC,aAAaA,CAAA;IACX,OAAO,OAAO;EAChB;EAEAC,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACP,cAAc;EAC5B;EAEAQ,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACP,gBAAgB;EAC9B;EAEAQ,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACL,kBAAkB;EAChC;EAEAM,kBAAkBA,CAAA;IAChB,OAAO;MACLC,QAAQ,EAAE,IAAI,CAACL,aAAa,EAAE;MAC9BM,OAAO,EAAE,IAAI,CAACL,iBAAiB,EAAE;MACjCM,SAAS,EAAE,IAAI,CAACL,mBAAmB;KACpC;EACH;EAEQH,kBAAkBA,CAAA;IACxB,IAAI,CAACN,IAAI,CAACe,GAAG,CAAqB,mCAAmC,CAAC,CACnEC,IAAI,CACHnB,UAAU,CAACoB,KAAK,IAAG;MACjBC,OAAO,CAACC,IAAI,CAAC,kCAAkC,EAAEF,KAAK,CAAC;MACvD,OAAOrB,EAAE,CAAC,IAAI,CAAC;IACjB,CAAC,CAAC,CACH,CACAwB,SAAS,CAACC,WAAW,IAAG;MACvB,IAAIA,WAAW,EAAE;QACf,IAAI,CAACpB,cAAc,GAAGoB,WAAW,CAACC,OAAO;QACzC,IAAI,CAACpB,gBAAgB,GAAGmB,WAAW,CAACP,SAAS;QAC7C,IAAI,CAACT,kBAAkB,GAAGgB,WAAW;;IAEzC,CAAC,CAAC;EACN;EAEA;EACAE,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACvB,IAAI,CAACe,GAAG,CAAqB,mCAAmC,CAAC,CAC1EC,IAAI,CACHnB,UAAU,CAACoB,KAAK,IAAG;MACjBC,OAAO,CAACC,IAAI,CAAC,kCAAkC,EAAEF,KAAK,CAAC;MACvD,OAAOrB,EAAE,CAAC,IAAI,CAAC;IACjB,CAAC,CAAC,CACH;EACL;;;uBA5DWE,cAAc,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAd7B,cAAc;MAAA8B,OAAA,EAAd9B,cAAc,CAAA+B,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}