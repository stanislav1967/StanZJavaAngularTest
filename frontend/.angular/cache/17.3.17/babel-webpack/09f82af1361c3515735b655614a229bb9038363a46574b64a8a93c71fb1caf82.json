{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StudentService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/students';\n    this.studentsSubject = new BehaviorSubject([]);\n    this.students$ = this.studentsSubject.asObservable();\n  }\n  // Get all students\n  getStudents() {\n    return this.http.get(this.apiUrl).pipe(tap(students => this.studentsSubject.next(students)), catchError(this.handleError));\n  }\n  // Get student by ID\n  getStudent(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  // Create new student\n  createStudent(student) {\n    return this.http.post(this.apiUrl, student).pipe(tap(newStudent => {\n      const currentStudents = this.studentsSubject.value;\n      this.studentsSubject.next([...currentStudents, newStudent]);\n    }), catchError(this.handleError));\n  }\n  // Update student\n  updateStudent(id, student) {\n    return this.http.put(`${this.apiUrl}/${id}`, student).pipe(tap(updatedStudent => {\n      const currentStudents = this.studentsSubject.value;\n      const index = currentStudents.findIndex(s => s.id === id);\n      if (index !== -1) {\n        currentStudents[index] = updatedStudent;\n        this.studentsSubject.next([...currentStudents]);\n      }\n    }), catchError(this.handleError));\n  }\n  // Delete student\n  deleteStudent(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => {\n      const currentStudents = this.studentsSubject.value;\n      const filteredStudents = currentStudents.filter(s => s.id !== id);\n      this.studentsSubject.next(filteredStudents);\n    }), catchError(this.handleError));\n  }\n  // Search students\n  searchStudents(query) {\n    const url = query ? `${this.apiUrl}/search?q=${encodeURIComponent(query)}` : this.apiUrl;\n    return this.http.get(url).pipe(tap(students => this.studentsSubject.next(students)), catchError(this.handleError));\n  }\n  // Enroll student in courses\n  enrollStudentInCourses(studentId, courseIds) {\n    return this.http.post(`${this.apiUrl}/${studentId}/courses`, courseIds).pipe(catchError(this.handleError));\n  }\n  // Refresh students list\n  refreshStudents() {\n    this.getStudents().subscribe();\n  }\n  // Error handling\n  handleError(error) {\n    console.error('An error occurred:', error);\n    throw error;\n  }\n  static {\n    this.ɵfac = function StudentService_Factory(t) {\n      return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StudentService,\n      factory: StudentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","catchError","StudentService","constructor","http","apiUrl","studentsSubject","students$","asObservable","getStudents","get","pipe","students","next","handleError","getStudent","id","createStudent","student","post","newStudent","currentStudents","value","updateStudent","put","updatedStudent","index","findIndex","s","deleteStudent","delete","filteredStudents","filter","searchStudents","query","url","encodeURIComponent","enrollStudentInCourses","studentId","courseIds","refreshStudents","subscribe","error","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\avrah\\OneDrive\\Work\\JavaAngularTest\\frontend\\src\\app\\services\\student.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap, catchError } from 'rxjs/operators';\r\nimport { Student, StudentFormData } from '../models/student.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StudentService {\r\n  private apiUrl = 'http://localhost:8080/api/students';\r\n  private studentsSubject = new BehaviorSubject<Student[]>([]);\r\n  public students$ = this.studentsSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Get all students\r\n  getStudents(): Observable<Student[]> {\r\n    return this.http.get<Student[]>(this.apiUrl).pipe(\r\n      tap(students => this.studentsSubject.next(students)),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Get student by ID\r\n  getStudent(id: number): Observable<Student> {\r\n    return this.http.get<Student>(`${this.apiUrl}/${id}`).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Create new student\r\n  createStudent(student: StudentFormData): Observable<Student> {\r\n    return this.http.post<Student>(this.apiUrl, student).pipe(\r\n      tap(newStudent => {\r\n        const currentStudents = this.studentsSubject.value;\r\n        this.studentsSubject.next([...currentStudents, newStudent]);\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Update student\r\n  updateStudent(id: number, student: StudentFormData): Observable<Student> {\r\n    return this.http.put<Student>(`${this.apiUrl}/${id}`, student).pipe(\r\n      tap(updatedStudent => {\r\n        const currentStudents = this.studentsSubject.value;\r\n        const index = currentStudents.findIndex(s => s.id === id);\r\n        if (index !== -1) {\r\n          currentStudents[index] = updatedStudent;\r\n          this.studentsSubject.next([...currentStudents]);\r\n        }\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Delete student\r\n  deleteStudent(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`).pipe(\r\n      tap(() => {\r\n        const currentStudents = this.studentsSubject.value;\r\n        const filteredStudents = currentStudents.filter(s => s.id !== id);\r\n        this.studentsSubject.next(filteredStudents);\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Search students\r\n  searchStudents(query: string): Observable<Student[]> {\r\n    const url = query ? `${this.apiUrl}/search?q=${encodeURIComponent(query)}` : this.apiUrl;\r\n    return this.http.get<Student[]>(url).pipe(\r\n      tap(students => this.studentsSubject.next(students)),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Enroll student in courses\r\n  enrollStudentInCourses(studentId: number, courseIds: number[]): Observable<void> {\r\n    return this.http.post<void>(`${this.apiUrl}/${studentId}/courses`, courseIds).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Refresh students list\r\n  refreshStudents(): void {\r\n    this.getStudents().subscribe();\r\n  }\r\n\r\n  // Error handling\r\n  private handleError(error: any): Observable<never> {\r\n    console.error('An error occurred:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}