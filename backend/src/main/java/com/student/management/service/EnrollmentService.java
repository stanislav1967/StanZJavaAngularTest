package com.student.management.service;

import com.student.management.dto.EnrollmentResponse;
import com.student.management.entity.Student;
import com.student.management.entity.Course;
import com.student.management.exception.ResourceNotFoundException;
import com.student.management.exception.ValidationException;
import com.student.management.repository.StudentRepository;
import com.student.management.repository.CourseRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@Transactional
public class EnrollmentService {

    @Autowired
    private StudentRepository studentRepository;
    
    @Autowired
    private CourseRepository courseRepository;

    public EnrollmentResponse enrollStudentInCourse(Long studentId, Long courseId) {
        // Validate student and course exist
        Student student = studentRepository.findById(studentId)
            .orElseThrow(() -> new ResourceNotFoundException("Student not found with id: " + studentId));
        
        Course course = courseRepository.findById(courseId)
            .orElseThrow(() -> new ResourceNotFoundException("Course not found with id: " + courseId));
        
        // Check if already enrolled
        if (student.getCourses().contains(course)) {
            throw new ValidationException("Student is already enrolled in this course");
        }
        
        // Check if course is active
        if (!course.getIsActive()) {
            throw new ValidationException("Cannot enroll in inactive course");
        }
        
        // Add course to student's courses
        student.getCourses().add(course);
        studentRepository.save(student);
        
        // Create and return enrollment response
        return new EnrollmentResponse(
            null, // ID will be generated by the database
            studentId,
            courseId,
            LocalDateTime.now(),
            student.getFirstName() + " " + student.getLastName(),
            course.getCourseName()
        );
    }

    public void unenrollStudentFromCourse(Long studentId, Long courseId) {
        // Validate student and course exist
        Student student = studentRepository.findById(studentId)
            .orElseThrow(() -> new ResourceNotFoundException("Student not found with id: " + studentId));
        
        Course course = courseRepository.findById(courseId)
            .orElseThrow(() -> new ResourceNotFoundException("Course not found with id: " + courseId));
        
        // Check if enrolled
        if (!student.getCourses().contains(course)) {
            throw new ValidationException("Student is not enrolled in this course");
        }
        
        // Remove course from student's courses
        student.getCourses().remove(course);
        studentRepository.save(student);
    }

    public List<EnrollmentResponse> getStudentEnrollments(Long studentId) {
        // Validate student exists
        Student student = studentRepository.findById(studentId)
            .orElseThrow(() -> new ResourceNotFoundException("Student not found with id: " + studentId));
        
        return student.getCourses().stream()
            .map(course -> new EnrollmentResponse(
                null,
                studentId,
                course.getId(),
                LocalDateTime.now(), // Note: This is a simplified approach
                student.getFirstName() + " " + student.getLastName(),
                course.getCourseName()
            ))
            .collect(Collectors.toList());
    }

    public List<EnrollmentResponse> getCourseEnrollments(Long courseId) {
        // Validate course exists
        Course course = courseRepository.findById(courseId)
            .orElseThrow(() -> new ResourceNotFoundException("Course not found with id: " + courseId));
        
        return course.getStudents().stream()
            .map(student -> new EnrollmentResponse(
                null,
                student.getId(),
                courseId,
                LocalDateTime.now(), // Note: This is a simplified approach
                student.getFirstName() + " " + student.getLastName(),
                course.getCourseName()
            ))
            .collect(Collectors.toList());
    }

    public List<EnrollmentResponse> getAllEnrollments() {
        List<Student> students = studentRepository.findAll();
        
        return students.stream()
            .flatMap(student -> student.getCourses().stream()
                .map(course -> new EnrollmentResponse(
                    null,
                    student.getId(),
                    course.getId(),
                    LocalDateTime.now(), // Note: This is a simplified approach
                    student.getFirstName() + " " + student.getLastName(),
                    course.getCourseName()
                )))
            .collect(Collectors.toList());
    }
}
